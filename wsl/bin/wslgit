#!/bin/bash

# git wrapper for use in WSL
# If run from the WSL/Linux filesystem, invokes Linux git
# If run from the Windows filesystem, invokes Windows git.exe under cmd shell
#
# All arguments are passed to git.
#
# Suggested usage: add these lines to your bashrc / bash_profile:
# ```
# git () { wslgit "$@"; }
# export -f git
# ```

if [[ $(wslpath -m .) == //wsl* ]]; then
    # We're in the Linux filesystem, so just use Linux/WSL git
    exec git "$@"
fi

# Check for custom subcommand
if [[ $# -gt 0 ]]; then
    subcmd="git-$1"
    if command -v "$subcmd" &>/dev/null; then
        shift 1
        exec "$subcmd" "$@"
    fi
fi

# Check for required subcommand
if [[ -n $WSLGIT_ONLY ]]; then
    pass=true
    if [[ $# -gt 0 ]]; then
        for subcmd in $WSLGIT_ONLY; do
            if [[ $1 == $subcmd ]]; then
                pass=false
                break
            fi
        done
    fi
    if $pass; then
        exec git "$@"
    fi
fi

# Check for ignored subcommand
if [[ -n $WSLGIT_IGNORE && $# -gt 0 ]]; then
    for subcmd in $WSLGIT_IGNORE; do
        if [[ $1 == $subcmd ]]; then
            exec git "$@"
        fi
    done
fi

# We're in the Windows filesystem, use Windows git

[[ -t 1 && ! -n $WSLGIT_QUIET ]] && { echo "wslgit: switching to Windows git"; }

command -v cmd.exe &>/dev/null || { echo "cannot find cmd.exe" 1>&2; exit 1; }

WSLGIT="${WSLGIT:-git.exe}"
WSLPWD="${WSLPWD:-$(wslpath -m .)}"

adjusted_args=()
for arg in "$@"; do
    case "$arg" in
        --git-dir=*)
            adjusted_args+=("--git-dir=$(wslpath -m "${arg#--git-dir=}")")
            ;;
        *)
            adjusted_args+=("$arg")
            ;;
    esac
done

escaped_args=()
for arg in "${adjusted_args[@]}"; do
    escaped_args+=("$(printf "%q" "$arg")")
done

exec cmd.exe /c "cd /d "$WSLPWD" && "$WSLGIT" "${escaped_args[@]}""

