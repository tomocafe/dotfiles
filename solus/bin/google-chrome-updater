#!/usr/bin/env python3

import urllib.request
import xml.etree.ElementTree as ET
import subprocess
import argparse
import glob
import sys
import os

import gi
gi.require_version('Gtk', '3.0')
gi.require_version('Notify', '0.7')
from gi.repository import Gtk, Notify

def error(msg, rv=1):
    print('error:', msg, file=sys.stderr)
    sys.exit(rv)

def get_installed_version(target):
    return subprocess.check_output([target, '--version']).decode('utf-8').split()[-1]

def update(pspec, target):
    if os.geteuid() != 0:
        error('requires root (run with sudo)', rv=2)
    ret = subprocess.run(['eopkg', 'bi', '--ignore-safety', '-O', '/tmp', pspec], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    if ret.returncode != 0:
        error('failed to build the package')
    eopkg = glob.glob('/tmp/' + target + '*.eopkg')[-1]
    ret = subprocess.run(['eopkg', 'it', eopkg], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    os.remove(eopkg)
    if ret.returncode != 0:
        error('failed to install the package')
    print('Now installed:', get_installed_version(target))

def notify_action(notif, action, target):
    """ Notify.ActionCallback """
    try:
        subprocess.run(['pkexec', 'google-chrome-updater', '--target', target], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL)
    except:
        pass
    notif.close()

def notify(target):
    Notify.init('Google Chrome Updater')
    notif = Notify.Notification.new(
        'Google Chrome update available',
        'An update is now available.',
        'google-chrome'
    )
    notif.add_action(
        'google-chrome-updater',
        'Install',
        notify_action,
        target
    )
    notif.connect('closed', Gtk.main_quit)
    notif.show()
    Gtk.main()

def main():
    # Parse arguments
    parser = argparse.ArgumentParser(description='Updates Google Chrome on Solus')
    parser.add_argument('-t', '--target', type=str, choices=['stable', 'unstable', 'dev'], default='stable')
    parser.add_argument('--check', action='store_true', help='Check for update and send a Raven notification to prompt for installation')
    parser.add_argument('--timeout', type=int, default=5)
    args = parser.parse_args()
    target = 'google-chrome-' + args.target
    # Get current version
    installed_version = get_installed_version(target)
    # Get latest version from pspec
    url = 'https://raw.githubusercontent.com/getsolus/3rd-party/master/network/web/browser/' + target + '/pspec.xml'
    try:
        with urllib.request.urlopen(url, timeout=args.timeout) as fd:
            text = fd.read().decode('utf-8')
            root = ET.ElementTree(ET.fromstring(text)).getroot()
            for v in root.findall('./History/Update/Version'):
                latest_version = v.text
                break
    except:
        error('unable to fetch version information from the Solus repository')
    # Compare versions
    if latest_version == '':
        error('unable to decode version information from the Solus repository')
    if installed_version != latest_version:
        print('New version available:', latest_version)
        if args.check:
            notify(args.target)
        else:
            update(url, target)
    else:
        print('You are up to date!')

if __name__ == '__main__':
    main()
