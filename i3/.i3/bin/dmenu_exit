#!/bin/bash
actions=(cancel logout)

# Check if i3lock is available
if command -v i3lock &>/dev/null; then
    lock=i3lock
    actions+=(lock)
else
    lock=: # nop
fi

# Check if we can suspend, hibernate, restart, shutdown on a machine with systemd
command -v systemctl &>/dev/null && powerctl=true || powerctl=false
if $powerctl; then
    actions+=(suspend hibernate restart shutdown)
fi

# Process i3lock arguments
# Using sentinel flags to separate them from dmenu arguments
# First set of arguments is used to give switches for the i3lock-color fork
# If that version of i3lock is not the one in the PATH, the command will fail and we will fall back to the original version of i3lock with simple arguments
lockargs=()
if [[ $1 == '--start-i3lock-args' ]]; then
    shift
    while [[ $# -gt 0 && $1 != '--end-i3lock-args' ]]; do
        lockargs+=("$1")
        shift
    done
    [[ $# -gt 0 ]] && shift
fi
fallbackargs=()
if [[ $1 == '--start-i3lock-fallback-args' ]]; then
    shift
    while [[ $# -gt 0 && $1 != '--end-i3lock-fallback-args' ]]; do
        fallbackargs+=("$1")
        shift
    done
    [[ $# -gt 0 ]] && shift
fi

action=$(printf '%s\n' "${actions[@]}" | dmenu ${1+"$@"}) || exit 1
case $action in
    cancel)
        exit 0
        ;;
    logout)
        i3-msg exit
        ;;
    lock)
        $lock "${lockargs[@]}" || $lock "${fallbackargs[@]}"
        ;;
    suspend)
        $lock "${lockargs[@]}" || $lock "${fallbackargs[@]}" && systemctl suspend
        ;;
    hibernate)
        $lock "${lockargs[@]}" || $lock "${fallbackargs[@]}" && systemctl hibernate
        ;;
    restart)
        systemctl reboot
        ;;
    shutdown)
        systemctl poweroff
        ;;
esac
# The following message can be useful if one tries to invoke systemctl without proper permission
[[ $? -eq 0 ]] || i3-nagbar -t warning -m "Failed to $action"

