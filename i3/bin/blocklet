#!/usr/bin/env python3

import os
import sys
import argparse
import pycron
import json

###
### |defaults|
###

UNITS = 'imperial'
DNS = ''

WEATHER_FORMAT = '{cond} {temp}°'
WEATHER_SHORT_FORMAT = '{temp}°'
AQI_FORMAT = 'AQI {aqi}'
AQI_SHORT_FORMAT = '{aqi}'
STOCK_FORMAT = '{symbol} ${price}{status} ({sign}{percent}%)'
STOCK_SHORT_FORMAT = '${price}{status} ({sign}{percent}%)'
STOCK_TRADING_INDICATOR='*'
STOCK_AFTERHOURS_INDICATOR='^'
COMMUTE_FORMAT = '{hr}:{min}'
COMMUTE_SHORT_FORMAT = '{hr}:{min}'
COMMUTE_MODE = 'driving'
DISK_FORMAT = '{label} {pctused}%'
DISK_SHORT_FORMAT = '{pctused}%'
LOAD_FORMAT = '{label} {pctused}%'
LOAD_SHORT_FORMAT = '{pctused}%'

WEATHER_API_KEY = os.environ.get('WEATHER_API_KEY') # openweathermap.org
COMMUTE_API_KEY = os.environ.get('COMMUTE_API_KEY') # maps.googleapis.com

###
### |subroutines|
###

# Globals
proxy = None

def error(msg, code=1):
    print('Error:', msg, file=sys.stderr)
    sys.exit(rv)

def get(domain, resource, json=True, https=True):
    import requests
    server = domain
    headers = {}
    if proxy:
        import dns.resolver
        try:
            answer = proxy.query(domain, 'A')
        except:
            error('failed to query domain {}'.format(domain))
        server = answer[0].address
        headers = {'host': domain}
        if https:
            from requests_toolbelt.adapters import host_header_ssl
            requests.Session().mount('https://', host_header_ssl.HostHeaderSSLAdapter())
    protocol = 'https://' if https else 'http://'
    url = protocol + server + resource
    response = requests.get(url, headers=headers, verify=False) # TODO: get rid of verify=False
    return response.json() if json else response.text

def weather(args):
    if args.forecast:
        data = get('api.openweathermap.org', '/data/2.5/forecast/daily/?appid={key}&units={units}&{location}'.format(key=WEATHER_API_KEY, units=args.units, location=args.location))
        day = 0 if args.forecast == 'today' else 1
        strvals = {
            'lo': int(data['list'][day]['temp']['min']),
            'hi': int(data['list'][day]['temp']['max']),
            'cond': data['list'][day]['weather'][0]['main'],
            'wind': int(data['list'][day]['speed']),
            'humidity': int(data['list'][day]['humidity']),
            'pressure': int(data['list'][day]['pressure'])
        }
        strvals['temp'] = strvals['hi'] # register synonym
    else:
        data = get('api.openweathermap.org', '/data/2.5/weather/?appid={key}&units={units}&{location}'.format(key=WEATHER_API_KEY, units=args.units, location=args.location))
        strvals = {
            'temp': int(data['main']['temp']),
            'cond': data['weather'][0]['main'],
            'wind': int(data['wind']['speed']),
            'humidity': int(data['main']['humidity']),
            'pressure': int(data['main']['pressure'])
        }
    return strvals

def aqi(args):
    import xml.etree.ElementTree as ET
    import re
    if args.forecast:
        data = get('feeds.enviroflash.info', '/rss/forecast/{location}.xml'.format(location=args.location), False, False)
        text = ET.fromstring(get('feeds.enviroflash.info', '/rss/forecast/{location}.xml'.format(location=args.location), False, False)).find('./channel/item/description').text.replace('\n', '')
        day = 'Today' if args.forecast == 'today' else 'Tomorrow'
        matches = re.search('{day}.*: (\w+) *- ([0-9]+) AQI - Particle'.format(day=day), text)
        pm25 = ozone = [0, 'Unknown', 'Unknown']
        if matches:
            pm25 = [int(matches.group(2)), matches.group(1), 'PM2.5']
        matches = re.search('{day}.*: (\w+) *- ([0-9]+) AQI - Ozone'.format(day=day), text)
        if matches:
            ozone = [int(matches.group(2)), matches.group(1), 'Ozone']
        worst = max(pm25, ozone)
        strvals = {
            'desc' : worst[1],
            'aqi': worst[0],
            'type': worst[2]
        }
    else:
        text = ET.fromstring(get('feeds.enviroflash.info', '/rss/realtime/{location}.xml'.format(location=args.location), False, False)).find('./channel/item/description').text.replace('\n', '')
        matches = re.search('(\w+) *- ([0-9]+) AQI - Particle', text)
        pm25 = ozone = [0, 'Unknown', 'Unknown']
        if matches:
            pm25 = [int(matches.group(2)), matches.group(1), 'PM2.5']
        matches = re.search('(\w+) *- ([0-9]+) AQI - Ozone', text)
        if matches:
            ozone = [int(matches.group(2)), matches.group(1), 'Ozone']
        worst = max(pm25, ozone)
        strvals = {
            'desc' : worst[1],
            'aqi': worst[0],
            'type': worst[2]
        }
    return strvals

def stock(args):
    data = get('query1.finance.yahoo.com', '/v7/finance/quote?lang=en-US&region=US&corsDomain=finance.yahoo.com&symbols={symbol}'.format(symbol=args.symbol))
    status = data['quoteResponse']['result'][0]['marketState']
    indicator=''
    if args.after_hours and status == 'POST':
        price = data['quoteResponse']['result'][0]['postMarketPrice']
        change = data['quoteResponse']['result'][0]['postMarketChange']
        percent = data['quoteResponse']['result'][0]['postMarketChangePercent']
        indicator = args.after_hours_indicator
    else:
        price = data['quoteResponse']['result'][0]['regularMarketPrice']
        change = data['quoteResponse']['result'][0]['regularMarketChange']
        percent = data['quoteResponse']['result'][0]['regularMarketChangePercent']
        if status == 'REGULAR':
            indicator = args.trading_indicator
    # Format to 2 decimal places
    price = '{0:.2f}'.format(price)
    change = '{0:.2f}'.format(change)
    percent = '{0:.2f}'.format(percent)
    strvals = {
        'symbol': args.symbol,
        'price': price,
        'change': change,
        'percent': percent,
        'status': indicator,
        'sign': '+' if float(change) > 0 else ''
    }
    return strvals

def commute(args):
    data = get('maps.googleapis.com', '/maps/api/distancematrix/json?traffic_model=best_guess&mode={mode}&avoid={avoid}&key={key}&departure_time=now&origins={ori}&destinations={dst}&units={units}'.format(key=COMMUTE_API_KEY, mode=args.mode, avoid=args.avoid, ori=args.origin, dst=args.destination, units=args.units))
    duration_key = 'duration_in_traffic' if args.mode == 'driving' else 'duration'
    secs = data['rows'][0]['elements'][0][duration_key]['value']
    strvals = {
        'hr': int(secs / 3600),
        'min': int(secs / 60) % 60,
        'text': data['rows'][0]['elements'][0][duration_key]['text'],
        'distance': data['rows'][0]['elements'][0]['distance']['text']
    }
    return strvals

def b2h(b):
    from math import log2
    i = min(int(log2(b) / 10), 4) if b else 0
    return '{}{}'.format(float('%.3g' % (b / (1 << (i * 10)))), ['B','K','M','G','T'][i])

def disk(args):
    from psutil import disk_usage
    stats = disk_usage(args.path)
    strvals = {
        'label': args.label if args.label else args.path,
        'pctused': round(stats.percent),
        'pctfree': round(100.0 - stats.percent),
        'used': b2h(stats.used),
        'free': b2h(stats.free)
    }
    return strvals

def load(args):
    if not args.label:
        from socket import gethostname
    if args.type == 'cpu':
        from psutil import cpu_count
        load = os.getloadavg()[round(args.cpu_load_interval / 7)] # 1 min -> [0], 5 min -> [1], 15 min -> [2]
        strvals = {
            'label': args.label if args.label else gethostname(),
            'used': load,
            'free': cpu_count() - load,
            'pctused': round(100.0 * load / cpu_count()),
            'pctfree': round(100.0 - (100.0 * load / cpu_count()))
        }
    elif args.type == 'mem':
        if args.mem_type == 'virtual':
            from psutil import virtual_memory
            stats = virtual_memory()
        elif args.mem_type == 'swap':
            from psutil import swap_memory
            stats = swap_memory()
        strvals = {
            'label': args.label if args.label else gethostname(),
            'pctused': round(stats.percent),
            'pctfree': round(100.0 - stats.percent),
            'used': b2h(stats.used),
            'free': b2h(stats.free)
        }
    return strvals

def read_xresource_colors(args):
    import xrp
    try:
        xres = xrp.parse_file(os.path.expanduser(args.read_xresource_colors), 'utf-8')
    except:
        error('failed to parse Xresources file {}'.format(args.read_xresource_colors))
    xcolors = {}
    for i in range(0, 16):
        key = '*color' + str(i)
        if key in xres.resources:
            xcolors[str(i)] = xres.resources[key]
    return xcolors

def colorize(strvals, args, xcolors):
    import operator
    fg = bg = None
    for rules, op in list(zip([args.color_if_less, args.color_if_equal, args.color_if_more], [operator.lt, operator.eq, operator.gt])):
        for rule in rules:
            [key, threshold, *colors] = rule.split(',')
            # Convert 16-color code to hex if Xresource mapping is present
            if len(colors) > 0 and colors[0] in xcolors:
                colors[0] = xcolors[colors[0]]
            if len(colors) > 1 and colors[1] in xcolors:
                colors[1] = xcolors[colors[1]]
            # Cast threshold to be same type as value we're comparing against
            threshold = (type(strvals[key]))(threshold)
            if key in strvals and op(strvals[key], threshold):
                if args.color_whole_block:
                    fg = colors[0] if len(colors) > 0 else None
                    bg = colors[1] if len(colors) > 1 else None
                else:
                    props = ''
                    for prop, code in list(zip(['foreground', 'background'], colors)):
                        props += ' {prop}={code}'.format(prop=prop, code=code)
                    val = strvals[key]
                    strvals[key] = '<span{props}>{val}</span>'.format(props=props, val=val)
    return [strvals, fg, bg]

###
### |main|
###

def main():
    # Top level arguments
    parser = argparse.ArgumentParser(description='Generates blocklets for i3blocks', epilog="""
        [¹] - Use subcommand help (-h) to view available keys for coloring. Colors should be specified as hex codes, or 0-15 for 16-color codes if --read-xresource-colors is used.
              Rules are processed in order of: less, equal, more; and then by the order given in the command line.
        [²] - Reads *color0 to *color15 X resources and makes integers 0-15 valid for use in the --color-if-{less,equal,more} color rule definitions
    """)
    parser.add_argument('--schedule', type=str, nargs='?', help='Time window to run blocklet, in standard cron format')
    parser.add_argument('--dns', metavar='SERVER', nargs='?', help='Use a custom DNS server for web queries')
    parser.add_argument('--color-if-less', metavar='RULE', action='append', default=[], help='Color a key when its value is less than the specified threshold. Rule format: key_name,threshold,fgcolor[,bgcolor]¹')
    parser.add_argument('--color-if-equal', metavar='RULE', action='append', default=[], help='Color a key when its value is equal than the specified threshold. Rule format: key_name,threshold,fgcolor[,bgcolor]¹')
    parser.add_argument('--color-if-more', metavar='RULE', action='append', default=[], help='Color a key when its value is more than the specified threshold. Rule format: key_name,threshold,fgcolor[,bgcolor]¹')
    parser.add_argument('--color-whole-block', action='store_true', help='Color the entire block instead of only a key (does not require pango markup)')
    parser.add_argument('--read-xresource-colors', metavar='PATH', type=str, nargs='?', help='Read Xresources file for color definitions to use in color rule definitions.²')
    subparsers = parser.add_subparsers()
    # Weather
    subparser = subparsers.add_parser('weather', help='Generate weather blocklet', epilog="""
        Example location IDs: zip=95110
        Available keys for formatting:
        {temp} {hi} {lo} {cond} {wind} {humidity} {pressure}
        ({temp} is a synonym of {hi})
    """)
    subparser.add_argument('location', type=str, help='Location ID')
    subparser.add_argument('--forecast', type=str, nargs='?', choices=['today', 'tomorrow'])
    subparser.add_argument('--units', type=str, default=UNITS, choices=['imperial', 'metric'])
    subparser.add_argument('--format', type=str, default=WEATHER_FORMAT, help='Format string to print. Default: \'%(default)s\'')
    subparser.add_argument('--short-format', metavar='FORMAT', type=str, default=WEATHER_SHORT_FORMAT, help='Shorter format string to print when horizontal space is limited. Default: \'%(default)s\'')
    subparser.set_defaults(func=weather)
    # Air quality (AQI)
    subparser = subparsers.add_parser('aqi', help='Generate air quality blocklet', epilog="""
        Refer to airnowapi.org for location IDs.
        Available keys for formatting:
        {aqi} {desc} {type}
    """)
    subparser.add_argument('location', type=str, help='Location ID')
    subparser.add_argument('--forecast', type=str, nargs='?', choices=['today', 'tomorrow'])
    subparser.add_argument('--format', type=str, default=AQI_FORMAT, help='Format string to print. Default: \'%(default)s\'')
    subparser.add_argument('--short-format', metavar='FORMAT', type=str, default=AQI_SHORT_FORMAT, help='Shorter format string to print when horizontal space is limited. Default: \'%(default)s\'')
    subparser.set_defaults(func=aqi)
    # Stock
    subparser = subparsers.add_parser('stock', help='Generate stock blocklet', epilog="""
        Available keys for formatting:
        {symbol} {price} {change} {percent} {status} {sign}
    """)
    subparser.add_argument('symbol', type=str, help='Stock ticker symbol')
    subparser.add_argument('--after-hours', action='store_true', help='Use after hours trading price when available')
    subparser.add_argument('--trading-indicator', type=str, default=STOCK_TRADING_INDICATOR, help='Status indicator for when the market is trading. Default=\'%(default)s\'')
    subparser.add_argument('--after-hours-indicator', type=str, default=STOCK_AFTERHOURS_INDICATOR, help='Status indicator for when the market is trading after hours. Default=\'%(default)s\'')
    subparser.add_argument('--format', type=str, default=STOCK_FORMAT, help='Format string to print. Default: \'%(default)s\'')
    subparser.add_argument('--short-format', metavar='FORMAT', type=str, default=STOCK_SHORT_FORMAT, help='Shorter format string to print when horizontal space is limited. Default: \'%(default)s\'')
    subparser.set_defaults(func=stock)
    # Commute
    subparser = subparsers.add_parser('commute', help='Generate commute blocklet', epilog="""
        Available keys for formatting:
        {hr} {min} {text} {distance}
    """)
    subparser.add_argument('origin', type=str, help='Origin address')
    subparser.add_argument('destination', type=str, help='Destination address')
    subparser.add_argument('--mode', type=str, default=COMMUTE_MODE, choices=['driving', 'walking', 'bicycling', 'transit'])
    subparser.add_argument('--avoid', type=str, nargs='?', choices=['tolls', 'highways', 'ferries', 'indoor'])
    subparser.add_argument('--units', type=str, default=UNITS, choices=['imperial', 'metric'])
    subparser.add_argument('--format', type=str, default=COMMUTE_FORMAT, help='Format string to print. Default: \'%(default)s\'')
    subparser.add_argument('--short-format', metavar='FORMAT', type=str, default=COMMUTE_SHORT_FORMAT, help='Shorter format string to print when horizontal space is limited. Default: \'%(default)s\'')
    subparser.set_defaults(func=commute)
    # Disk
    subparser = subparsers.add_parser('disk', help='Generate disk blocklet', epilog="""
        Available keys for formatting:
        {label} {pctused} {pctfree} {used} {free}
    """)
    subparser.add_argument('path', type=str, help='Disk mount path')
    subparser.add_argument('--label', type=str, nargs='?', help='Nickname for this disk')
    subparser.add_argument('--format', type=str, default=DISK_FORMAT, help='Format string to print. Default: \'%(default)s\'')
    subparser.add_argument('--short-format', metavar='FORMAT', type=str, default=DISK_SHORT_FORMAT, help='Shorter format string to print when horizontal space is limited. Default: \'%(default)s\'')
    subparser.set_defaults(func=disk)
    # Load
    subparser = subparsers.add_parser('load', help='Generate load blocklet', epilog="""
        Available keys for formatting:
        {label} {used} {free} {pctused} {pctfree}
    """)
    subparser.add_argument('type', type=str, default='cpu', choices=['cpu', 'mem'])
    subparser.add_argument('--label', type=str, nargs='?', help='Nickname for this host')
    subparser.add_argument('--cpu-load-interval', type=int, default=5, choices=[1, 5, 15], help='Report average load over a 1, 5, or 15 minute interval. Default: %(default)s')
    subparser.add_argument('--mem-type', type=str, default='virtual', choices=['virtual', 'swap'])
    subparser.add_argument('--format', type=str, default=LOAD_FORMAT, help='Format string to print. Default: \'%(default)s\'')
    subparser.add_argument('--short-format', metavar='FORMAT', type=str, default=LOAD_SHORT_FORMAT, help='Shorter format string to print when horizontal space is limited. Default: \'%(default)s\'')
    subparser.set_defaults(func=load)

    args = parser.parse_args()

    if args.schedule and not pycron.is_now(args.schedule):
        print('Skip per schedule', file=sys.stderr)
        return

    if args.dns or DNS:
        import dns.resolver
        global proxy
        proxy = dns.resolver.Resolver(configure=False)
        proxy.nameservers = [args.dns if args.dns else DNS]

    try:
        func = args.func
    except AttributeError:
        parser.error('too few arguments')
    strvals = func(args)

    xcolors = {}
    if args.read_xresource_colors:
        xcolors = read_xresource_colors(args)

    [strvals, fg, bg] = colorize(strvals, args, xcolors)
    print(args.format.format(**strvals))
    print(args.short_format.format(**strvals))
    if fg:
        print(fg)
    if bg:
        print(bg)

if __name__ == '__main__':
    main()

