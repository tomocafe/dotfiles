# vim:ft=sh

if [[ ${BASH_VERSINFO:-0} -lt 4 ]]; then
    echo "${BASH_SOURCE[0]}: requires bash version 4 or later, this is $BASH_VERSION" 1>&2
    return 1
fi

source ~/.bash_functions ### to be phased out

###
### This requires bash-boost (github.com/tomocafe/bash-boost)
###
if [[ -z ${BB_VERSION+x} ]]; then
    echo "${BASH_SOURCE[0]}: bash-boost is required" 1>&2
    return 1
fi
bb_load util
bb_load interactive
bb_load cli

# Source site-specific bash settings under ~/.bash_settings.d
for f in $(shopt -s nullglob; echo ~/.bash_settings.d/*); do
    source $f
done

# Aliases
alias ls="command ls --color=auto -F"
alias which="type"
alias vi="vim"
alias ssh-tmp="command ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -o LogLevel=ERROR"
alias hc="bb_hardcopy"
alias compress="_compress"
alias extract="_extract"
alias mcd="bb_mcd"
alias history="_history"
alias h="history"
alias sms="_sms"
alias pidof="pgrep -x -u $USER"
alias dc=bb_up
complete -o nospace -F _bb_interactive_cmd_up_completion dc
function pushd() { command pushd ${1:-.}; }
function dirs() { command dirs "${1:--p}" "${@:2}"; }

# shell settings
set -o ignoreeof

# History settings
export HISTIGNORE="&:?:??:clear:pwd:exit:pushd:popd"

# Record shell root process
if [[ $- == *i* ]]; then
    export SHELL_ROOT_PROC="$(_getRootProcess)"
    # Save it to the active window properties (in the background, allows rest of script resume in parallel)
    # Keep this near the top for better parallelization
    if bb_iscmd xprop && bb_checkset DISPLAY; then
        {
            wid=$(xprop -root _NET_ACTIVE_WINDOW 2>/dev/null) && \
            xprop -id "${wid##* }" -f SHELL_ROOT_PROC 8s -set SHELL_ROOT_PROC "$SHELL_ROOT_PROC" &>/dev/null
        } &
    fi
fi

# Key bindings
if [[ $- == *i* ]]; then
    bind -x '"\C-f":bb_forkterm'
    bind -x '"\ez":fg'
    bind '"\e[Z": menu-complete'
    if [[ ${BASH_VERSINFO:-0} -ge 5 ]]; then
        # readline 8.1 (bash 5.1) turned this on by default
        bind 'set enable-bracketed-paste off'
    fi
fi

# Set prompt
if [[ $- == *i* ]]; then
    _analyzeColors
    TTY_NUM="$(command tty)"
    TTY_NUM="${TTY_NUM##*/}"
    bb_setpromptleft \
        _promptHeader \
        _promptHost \
        _promptGit \
        _promptP4 \
        _promptVenv \
        _promptJobs
    if [[ ${BASH_VERSINFO:-0} -ge 5 ]]; then
        # history doesn't work in PROMPT_COMMAND prior to bash 5.1
        bb_setpromptright \
            _promptHist \
            _promptSpaceSep \
            _promptDirpath \
            _promptDirname
    else
        bb_setpromptright \
            _promptDirpath \
            _promptDirname
    fi
    bb_setpromptnextline \
        _promptChar
    bb_setwintitle _promptWintitle
    bb_loadprompt
fi

# Directory colors
if [[ $- == *i* ]] && [[ -r ~/.dircolors ]]; then
    # Static color rules in .dircolors file
    eval $(dircolors -b ~/.dircolors)
    # Dynamic color rules altered as follows:
    _ow=({ow,tw}"=1;35;4${COLOR_BG_DIM_ID}")
    _tmp=({*~,*#,*#*,*.swp,*.swo,*\,v}"=1;3${COLOR_BG_DIM_ID}")
    export LS_COLORS="$LS_COLORS:$(bb_join : ${_ow[@]}):$(bb_join : ${_tmp[@]})"
    unset _ow
    unset _tmp
fi

# ack/ag settings
ACK_OPTIONS="--color-filename='green'"
ACK_OPTIONS+=" --color-match='bold red'"
ACK_OPTIONS+=" --color-lineno='blue'"
ACK_OPTIONS+=" --type-set=cc:ext:c,cc,cpp,cxx"
ACK_OPTIONS+=" --type-set=hh:ext:h,hh,hpp,hxx"
export ACK_OPTIONS
AG_OPTION+="--color-path='32'"
AG_OPTIONS+=" --color-match='1;31'"
AG_OPTIONS+=" --color-line-number='34'"
export AG_OPTIONS
alias ag="command ag $AG_OPTIONS"

alias s="search"
alias sag="search-ag"
alias a="search-select"
alias sls="search-list-cache"

# Set default editor
EDITOR="vim"
if _matchProcessTree "(vs)?(code(-oss)?(-insiders)?)"; then
    EDITOR="${BASH_REMATCH[2]} -r"
fi
export EDITOR

# Set the default terminal, if not already set
export TERMINAL=${TERMINAL:-urxvt-launch}

# Disable command-not-found handler
unset command_not_found_handle

# Disable annoying password popup
unset SSH_ASKPASS

# Add local perl5 modules
[[ -d ~/.local/lib/perl5 ]] && bb_appendpathuniq PERL5LIB ~/.local/lib/perl5

# Set starting path
if [[ $- == *i* ]]; then
    if bb_checkset BB_FORKDIR && [[ -d "$BB_FORKDIR" ]]; then
        # If this is a forked terminal, go the parent shell's directory
        cd "$BB_FORKDIR"
        unset BB_FORKDIR
    elif [[ "$PWD" == "$(readlink -f $HOME)" ]]; then
        # Fix home directory mismatch between real and symbolic path
        cd "$HOME"
    fi
fi
