#!/usr/bin/env python3

import os
import sys
import re
import argparse
import pycron
import json
import xml.etree.ElementTree as ET
import dns.resolver
import requests
from requests_toolbelt.adapters import host_header_ssl

###
### |defaults|
###

UNITS = 'imperial'
DNS = ''

WEATHER_FORMAT = '{cond} {temp}Â°'
AQI_FORMAT = 'AQI {aqi}'
STOCK_FORMAT = '{symbol} ${price}{status} ({change})'
STOCK_TRADING_INDICATOR='*'
STOCK_AFTERHOURS_INDICATOR='^'

WEATHER_API_KEY = os.environ['WEATHER_API_KEY'] # openweathermap.org

###
### |subroutines|
###

# Globals
proxy = None

def error(msg, code=1):
    print('Error:', msg, file=sys.stderr)
    sys.exit(rv)

def get(domain, resource, json=True, https=True):
    server = domain
    headers = {}
    if proxy:
        try:
            answer = proxy.query(domain, 'A')
        except:
            error('failed to query domain {}'.format(domain))
        server = answer[0].address
        headers = {'host': domain}
        if https:
            requests.Session().mount('https://', host_header_ssl.HostHeaderSSLAdapter())
    protocol = 'https://' if https else 'http://'
    url = protocol + server + resource
    response = requests.get(url, headers=headers, verify=False) # TODO: get rid of verify=False
    return response.json() if json else response.text

def weather(args):
    if args.schedule and not pycron.is_now(args.schedule):
        print('Skip per schedule', file=sys.stderr)
        return
    if args.forecast:
        data = get('api.openweathermap.org', '/data/2.5/forecast/daily/?appid={key}&units={units}&{location}'.format(key=WEATHER_API_KEY, units=args.units, location=args.location))
        day = 0 if args.forecast == 'today' else 1
        strvals = {
            'lo': int(data['list'][day]['temp']['min']),
            'hi': int(data['list'][day]['temp']['max']),
            'cond': data['list'][day]['weather'][0]['main'],
            'wind': int(data['list'][day]['speed']),
            'humidity': int(data['list'][day]['humidity']),
            'pressure': int(data['list'][day]['pressure'])
        }
        strvals['temp'] = strvals['hi'] # register synonym
    else:
        data = get('api.openweathermap.org', '/data/2.5/weather/?appid={key}&units={units}&{location}'.format(key=WEATHER_API_KEY, units=args.units, location=args.location))
        strvals = {
            'temp': int(data['main']['temp']),
            'cond': data['weather'][0]['main'],
            'wind': int(data['wind']['speed']),
            'humidity': int(data['main']['humidity']),
            'pressure': int(data['main']['pressure'])
        }
    print(args.format.format(**strvals))

def aqi(args):
    if args.schedule and not pycron.is_now(args.schedule):
        print('Skip per schedule', file=sys.stderr)
        return
    if args.forecast:
        data = get('feeds.enviroflash.info', '/rss/forecast/{location}.xml'.format(location=args.location), False, False)
        text = ET.fromstring(get('feeds.enviroflash.info', '/rss/forecast/{location}.xml'.format(location=args.location), False, False)).find('./channel/item/description').text.replace('\n', '')
        day = 'Today' if args.forecast == 'today' else 'Tomorrow'
        matches = re.search('{day}.*: (\w+) *- ([0-9]+) AQI - Particle'.format(day=day), text)
        pm25 = ozone = [0, 'Unknown', 'Unknown']
        if matches:
            pm25 = [int(matches.group(2)), matches.group(1), 'PM2.5']
        matches = re.search('{day}.*: (\w+) *- ([0-9]+) AQI - Ozone'.format(day=day), text)
        if matches:
            ozone = [int(matches.group(2)), matches.group(1), 'Ozone']
        worst = max(pm25, ozone)
        strvals = {
            'desc' : worst[1],
            'aqi': worst[0],
            'type': worst[2]
        }
    else:
        text = ET.fromstring(get('feeds.enviroflash.info', '/rss/realtime/{location}.xml'.format(location=args.location), False, False)).find('./channel/item/description').text.replace('\n', '')
        matches = re.search('(\w+) *- ([0-9]+) AQI - Particle', text)
        pm25 = ozone = [0, 'Unknown', 'Unknown']
        if matches:
            pm25 = [int(matches.group(2)), matches.group(1), 'PM2.5']
        matches = re.search('(\w+) *- ([0-9]+) AQI - Ozone', text)
        if matches:
            ozone = [int(matches.group(2)), matches.group(1), 'Ozone']
        worst = max(pm25, ozone)
        strvals = {
            'desc' : worst[1],
            'aqi': worst[0],
            'type': worst[2]
        }
    print(args.format.format(**strvals))

def stock(args):
    if args.schedule and not pycron.is_now(args.schedule):
        print('Skip per schedule', file=sys.stderr)
        return
    data = get('query1.finance.yahoo.com', '/v7/finance/quote?lang=en-US&region=US&corsDomain=finance.yahoo.com&symbols={symbol}'.format(symbol=args.symbol))
    status = data['quoteResponse']['result'][0]['marketState']
    indicator=''
    if args.after_hours and status == 'POST':
        price = data['quoteResponse']['result'][0]['postMarketPrice']
        change = data['quoteResponse']['result'][0]['postMarketChange']
        percent = data['quoteResponse']['result'][0]['postMarketChangePercent']
        indicator = args.after_hours_indicator
    else:
        price = data['quoteResponse']['result'][0]['regularMarketPrice']
        change = data['quoteResponse']['result'][0]['regularMarketChange']
        percent = data['quoteResponse']['result'][0]['regularMarketChangePercent']
        if status == 'REGULAR':
            indicator = args.trading_indicator
    # Format to 2 decimal places, add + in front of positive change values
    price = '{0:.2f}'.format(price)
    change = '{0}{1:.2f}'.format('+' if change >= 0 else '', change)
    percent = '{0}{1:.2f}'.format('+' if percent >= 0 else '', percent)
    strvals = {
        'symbol': args.symbol,
        'price': price,
        'change': change,
        'percent': percent,
        'status': indicator
    }
    print(args.format.format(**strvals))
###
### |main|
###

def main():
    # Top level arguments
    parser = argparse.ArgumentParser(description='Generates blocklets for i3blocks')
    parser.add_argument('--no-pango', action='store_true', help='Use basic i3bar protocol instead of pango markup')
    parser.add_argument('--dns', nargs='?', help='Use a custom DNS server for web queries')
    parser.add_argument('--schedule', type=str, nargs='?', help='Time window to run blocklet, in standard cron format')
    subparsers = parser.add_subparsers()
    # Weather
    subparser = subparsers.add_parser('weather', help='Generate weather blocklet', epilog="""
        Example location IDs: zip=95110
        Available keys for formatting:
        {temp} {hi} {lo} {cond} {wind} {humidity} {pressure}
        ({temp} is a synonym of {hi})
    """)
    subparser.add_argument('location', type=str, help='Location ID')
    subparser.add_argument('--forecast', type=str, nargs='?', choices=['today', 'tomorrow'])
    subparser.add_argument('--units', type=str, default=UNITS, choices=['imperial', 'metric'])
    subparser.add_argument('--format', type=str, default=WEATHER_FORMAT, help='Format string to print. Default: \'{}\''.format(WEATHER_FORMAT))
    subparser.set_defaults(func=weather)
    # Air quality (AQI)
    subparser = subparsers.add_parser('aqi', help='Generate air quality blocklet', epilog="""
        Refer to airnowapi.org for location IDs.
        Available keys for formatting:
        {aqi} {desc} {type}
    """)
    subparser.add_argument('location', type=str, help='Location ID')
    subparser.add_argument('--forecast', type=str, nargs='?', choices=['today', 'tomorrow'])
    subparser.add_argument('--format', type=str, default=AQI_FORMAT, help='Format string to print. Default: \'{}\''.format(AQI_FORMAT))
    subparser.set_defaults(func=aqi)
    # Stock
    subparser = subparsers.add_parser('stock', help='Generate stock blocklet', epilog="""
        Available keys for formatting:
        {...}
    """)
    subparser.add_argument('symbol', type=str, help='Stock ticker symbol')
    subparser.add_argument('--after-hours', action='store_true', help='Use after hours trading price when available')
    subparser.add_argument('--trading-indicator', type=str, default=STOCK_TRADING_INDICATOR, help='Status indicator for when the market is trading. Default=\'{}\''.format(STOCK_TRADING_INDICATOR))
    subparser.add_argument('--after-hours-indicator', type=str, default=STOCK_AFTERHOURS_INDICATOR, help='Status indicator for when the market is trading after hours. Default=\'{}\''.format(STOCK_AFTERHOURS_INDICATOR))
    subparser.add_argument('--format', type=str, default=STOCK_FORMAT, help='Format string to print. Default: \'{}\''.format(STOCK_FORMAT))
    subparser.set_defaults(func=stock)
    #
    args = parser.parse_args()

    if args.dns or DNS:
        global proxy
        proxy = dns.resolver.Resolver(configure=False)
        proxy.nameservers = [args.dns if args.dns else DNS]

    try:
        func = args.func
    except AttributeError:
        parser.error('too few arguments')
    func(args)

if __name__ == '__main__':
    main()

