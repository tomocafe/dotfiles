#!/usr/bin/env perl

use warnings;
use strict;

use Term::ANSIColor;
use File::stat;
use Cwd;

###
### |defaults|
###

my $ENGINE = "ack";
my $PAGER = "less -SFXRM";
my $EDITOR = $ENV{'EDITOR'} ? $ENV{'EDITOR'} : 'vim';
my $ACTION = "$EDITOR {} +{}";
my $CACHEDIR = $ENV{'SEARCH_CACHEDIR'} ? $ENV{'SEARCH_CACHEDIR'} : "$ENV{'HOME'}/.cache/search";
my $CACHESIZE = $ENV{'SEARCH_CACHESIZE'} ? $ENV{'SEARCH_CACHESIZE'} : 10;
my $WSL = exists $ENV{'WSLENV'};
my $NTEXE = 0;
my $CONTEXT = 0;

my $ENGINEOPTSKEY;
my $ENGINEOPTS;

###
### |subroutines|
###

sub help {
    if ($0 =~ m/list-cache/) {
        printf STDERR "search-list-cache  # no arguments\n"
    }
    elsif ($0 =~ m/select/) {
        printf STDERR "search-select [{+%%}N] [MATCH [ACTION]]\n";
        printf STDERR "  +N: select match from cache id N (default: 0)\n";
        printf STDERR "  %%N: as above, but also brings N to the front of the cache, so N becomes 0\n";
        printf STDERR "  MATCH: match id in the cache\n";
        printf STDERR "  ACTION: what to launch with the match filename and line number (default: \"$ACTION\")\n";
        printf STDERR "\nIf no MATCH id is given, it simply displays the search results from the cache\n";
    }
    else { # search
        printf STDERR "search [OPTS] PATTERN\n";
        printf STDERR "\nAll OPTS are passed directly to the engine ($ENGINE)\n";
        if ($ENGINEOPTS) {
            printf STDERR "\nThese options are additionally passed to $ENGINE based on the $ENGINEOPTSKEY environment variable:\n  $ENGINEOPTS\n";
        }
        printf STDERR "\nFor $ENGINE help, use --${ENGINE}-help\n";
    }
}

# Retrieve all cache files sorted descending by modification time
sub getcaches {
    mkdir $CACHEDIR unless -d $CACHEDIR or die $!;
    opendir (my $D, $CACHEDIR) or die $!;
    my @files = grep { $_ !~ m/^\.+$/ } readdir($D);
    @files = sort { (stat "$CACHEDIR/$b")->[10] <=> (stat "$CACHEDIR/$a")->[10] } @files;
    return @files;
}

# Set up the cache file for later recall
# Generates a cache file name with the timestamp and truncated encoded arguments
sub setcache {
    # Clean up the oldest cache file once the cache overflows
    my @old = getcaches ();
    while (scalar @old >= $CACHESIZE) {
        my $rem = pop @old;
        unlink "$CACHEDIR/$rem" or warn "Failed to clean up cache: $rem";
    }
    # Encode and truncate arguments as the new cache file name
    my $encoded = join '%20', @_;
    $encoded =~ s/ /%20/g;
    $encoded =~ s/\*/%2a/g;
    $encoded =~ s/\//%2f/g;
    my $maxlen = 40;
    for (my $offset = 2; $offset > 0; $offset--) {
        if (length($encoded) >= $maxlen - $offset + 3 && 
            substr($encoded, $maxlen - $offset, 3) =~ m/%2[0af]/) {
            $maxlen -= $offset;
            last;
        }
    }
    my $cache = $CACHEDIR . "/" . time() . ":" . substr($encoded, 0, $maxlen);
    return $cache;
}

# Increment the index in base-36
sub b36inc {
    my ($p, $d) = (substr($_[0], 0, length($_[0]) - 1), substr ($_[0], -1));
    if    ($d eq '9') { $_[0] =        $p  . "a";  }
    elsif ($d eq 'k') { $_[0] =        $p  . "m";  } # skip L for legibility
    elsif ($d eq 'z') { $_[0] = b36inc($p) . "0";  }
    else              { $_[0] =        $p  . ++$d; }
}

# Strip ANSI color codes from the string
# This should be replaced by Term::ANSIColor but it requires v2.01+
# ag uses \e[K (clear to end of line) which also needs stripping
sub colorstrip {
    my $dirty = shift @_;
    (my $clean = $dirty) =~ s/\e\[(\d+(?>(;\d+)*)m|K)//g;
    return $clean;
}

# Trim leading/trailing whitespace from matching line
# This makes it easier to view all the results together, since each
# matching line might have different indentation levels
sub trimws {
    my $line = shift @_;
    $line =~ s/\s*$//; # trailing space: always
    return $line if $CONTEXT; # don't trim if showing context lines, as it messes up indentation
    $line =~ s/:\s*/: /; # leading space
    return $line;
}

# Returns regex pattern string to mathc the line comment starting strings
# based on the inferred programming language of the file
# Supported: C, C++, Java, Javascript, Perl, Python, shell scripts
sub getlinecommentregex {
    my $file = shift @_;
    my $type = `file -L --brief --mime-type $file`;
    if ($type =~ /text\/(x-)?(c\+?\+?|java(script)?)/) {
        return qr/\/[\/\*]/;
    }
    elsif ($type =~ /text\/(x-)?(perl|python|shellscript)/) {
        return qr/#/;
    }
    return '';
}

sub dimcomment {
    my ($re, $line) = @_;
    return $line unless $re;
    # Lazy syntax highlighting: if any quotes are involved, give up
    return $line if $line =~ m/["']+/;
    return $line unless $line =~ $re;
    my $dim = color('dark white');
    my ($pre, $sep, $comment) = ($line =~ m/^(.*?)($re)(.*)$/);
    return $pre . color('dark white') . $sep . colorstrip($comment) . color('reset');
}

# Captures search engine output and pipes to pager, appending indices in front of matches
sub search {
    # Open a pipe to invoke the search engine
    my @args = map { "\"$_\"" } @_; # re-quote all arguments to pass to the engine
    open (my $I, '-|', "$ENGINE --group --color $ENGINEOPTS @args") or die $!;
    my $O = undef;
    my $F = undef;
    my $cmt = '';
    my $id = 0;
    # For each line of the search engine output (stdout)
    while (my $line = <$I>) {
        # Append a base-36 index in front of matches
        # and clean up leading whitespace
        my $stripped = colorstrip($line);
        if ($stripped =~ m/^[0-9]+:/) { # is a match
            b36inc $id; # start with 1 since it is easier to reach than 0 on the keyboard
            my $disp = dimcomment($cmt, trimws($line));
            $line = sprintf "%s%-3s%s %s\n", color('cyan'), $id, color('reset'), $disp;
        }
        elsif ($stripped =~ m/^[0-9]+-/) { # context line (-A, -B)
            my $disp = dimcomment($cmt, trimws($line));
            $line = sprintf "%-3s %s\n", '', $disp;
        }
        elsif ($line =~ /^--$/) { # separator for context block (-A, -B)
            next;
        }
        elsif (not $line =~ /^$/) { # is a filename
            $cmt = getlinecommentregex $stripped;
        }
        # Pipe to the output pager
        unless ($O) {
            open ($O, "|$PAGER") or die $!;
        }
        print $O "$line";
        # Write to the cache
        unless ($F) {
            open ($F, '>', setcache(@_)) or die $!;
            # Print a header to the cache file
            print $F "::@_\n";
            print $F "::" . cwd . "\n";
            print $F "::" . scalar localtime() . "\n";
        }
        print $F "$line";
    }
    close $I;
    close $O if $O;
    close $F if $F;
}

# List caches available (with search arguments, working directory, time and date of search)
sub listcaches {
    my $id = 0;
    foreach my $cache (getcaches ()) {
        open (my $fd, '<', "$CACHEDIR/$cache") or die $!;
        my @header = ();
        while (my $line = <$fd>) {
            last unless $line =~ m/^::/;
            $line =~ s/^:://;
            push @header, $line;
        }
        close $fd;
        my $w = length($CACHESIZE); # +1 for leading '+'
        printf "%s%${w}s%s %s%s%s", color('cyan'), '+' . $id, color('reset'), color('green'), $header[0], color('reset');
        for (my $i = 1; $i < scalar @header; $i++) {
            printf "%${w}s %s", ' ', $header[$i];
        }
        $id++;
    }
}

# Given a cache, re-list the matches
sub listmatches {
    my $cacheid = shift @_;
    my $cache = (getcaches)[$cacheid];
    return unless $cache;
    open (my $I, '<', "$CACHEDIR/$cache") or die $!;
    open (my $O, "|$PAGER") or die $!;
    while (my $line = <$I>) {
        next if $line =~ m/^::/; # skip headers
        print $O "$line";
    }
}

sub wslpath {
    my $lpath = shift @_;
    my $wpath = `wslpath -w "$lpath"`;
    chomp $wpath;
    return $wpath;
}

# Invoke the action (e.g. editor) on the selected match
sub openselection {
    my ($filepath, $lineno) = @_;
    my $cmd = $ACTION;
    $filepath = wslpath "$filepath" if $WSL and $NTEXE;
    $cmd =~ s/{file}/"$filepath"/g;
    $cmd =~ s/{line}/$lineno/g;
    $cmd =~ s/{}/"$filepath"/; # replace first occurrence of {} with filepath
    $cmd =~ s/{}/$lineno/; # replace second occurrence of {} with lineno
    exec $ENV{'SHELL'}, "-c", $cmd;  # using this instead of system honors user's shell instead of using /bin/sh
}

# Select a match by index from the given cache
sub selectmatch {
    my ($id, $cacheid) = @_;
    my $cache = (getcaches)[$cacheid];
    return unless $cache;
    my @header = ();
    my $curfile = '';
    open (my $I, '<', "$CACHEDIR/$cache") or die $!;
    while (my $line = <$I>) {
        chomp $line;
        $line = colorstrip($line);
        if ($line =~ m/^::/) {
            $line =~ s/^:://;
            push @header, $line;
        }
        elsif ($line =~ m/^[0-9a-z]+\s+[0-9]+:/) {
            if (my ($lineno) = ($line =~ m/^${id}\s+([0-9]+):/)) {
                openselection "$header[1]/$curfile", $lineno;
                last;
            }
        }
        elsif ($line !~ m/^$/ and $line !~ m/^\s+/){
            $curfile = $line;
        } 
    }
}

###
### |main|
###

# Interpret executable name (symlink) to select action and parameters
if ($0 =~ m/ack/)   { $ENGINE = "ack"; }
elsif ($0 =~ m/ag/) { $ENGINE = "ag";  }

$ENGINEOPTSKEY = 'SEARCH_' . uc($ENGINE) . '_OPTIONS';
$ENGINEOPTS = $ENV{$ENGINEOPTSKEY};

# Adjust default action for editors that do not follow +lineno syntax
if ($EDITOR =~ m/code/) {
    $ACTION = "$EDITOR -g {}:{}";
}

# Help pages
foreach (@ARGV) {
    if ($_ eq '--help' or $_ eq '-h') {
        help;
        exit 0;
    }
    elsif ($_ eq "--${ENGINE}-help") {
        system "$ENGINE", '--help';
        exit 0;
    }
}

if ($0 =~ m/list-cache/) {
    listcaches;
}
elsif ($0 =~ m/select/) {
    # Check for specific cache ID
    my $cache = 0;
    while (scalar @ARGV and $ARGV[0] =~ m/^[+%][0-9]+$/) {
        ($cache = $ARGV[0]) =~ s/^[+%]//;
        if (substr($ARGV[0], 0, 1) eq '%') {
            # Touch the cache file and reset cache ID to 0
            if (system('touch', "$CACHEDIR/" . (getcaches)[$cache]) == 0) {
                $cache = 0;
            }
        }
        shift @ARGV;
    }
    # Check for other flags
    while (scalar @ARGV and $ARGV[0] =~ /^-/) {
        if ($ARGV[0] eq '--') {
            shift @ARGV;
            last;
        }
        elsif ($ARGV[0] eq '--wsl-exe') {
            $NTEXE = 1;
            shift @ARGV;
        }
    }
    # Set action if specified
    if ($ARGV[1]) {
        $ACTION = "$ARGV[1]";
    }
    # No selection, re-list all matches in the cache
    if (scalar @ARGV == 0) {
        listmatches $cache;
    }
    # Open the selected match
    else {
        selectmatch $ARGV[0], $cache;
    }
}
else {
    foreach (@ARGV) {
        if ($_ =~ m/^-[AB]/) {
            $CONTEXT = 1;
            last;
        }
    }
    search (@ARGV);
}

