#!/bin/bash

: ${BB_ROOT?requires bash-boost to run this script}
source "$BB_ROOT/bash-boost.sh" || exit 5
bb_load util/env cli/arg cli/msg

bb_setprog "${BASH_SOURCE[0]##*/}"
bb_addopt "i:increment" "window size scaling percent increment (default: 10)" 10
bb_addflag "v:verbose"
bb_setpositional "COMMAND"
bb_parseargs "$@"; set -- "${BB_POSARGS[@]}"

bb_getopt -v inc increment

is_valid_percent () {
    bb_isint "$1" || return $__bb_error
    [[ $1 -gt 0 && $1 -le 100 ]]
}

for v in inc; do
    is_valid_percent ${!v} || bb_errusage "$v flag must be integer from 1 to 100"
done

for cmd in xdotool xprop; do
    bb_iscmd $cmd || bb_fatal "missing required tool: $cmd"
done

# Get screen geometry
eval "$(xdotool search --maxdepth 0 --class "" getwindowgeometry --shell)"
screen_height="$HEIGHT"
screen_width="$WIDTH"

# Get desktop geometry, if available
# Desktop is the screen minus panels
if bb_iscmd panel-aware-screen-geom; then
    eval "$(panel-aware-screen-geom)"
fi
desktop_height="$HEIGHT"
desktop_width="$WIDTH"
desktop_x="$X"
desktop_y="$Y"

# Get active window geometry
# This includes window decorations
wid="$(xdotool getactivewindow)"
eval "$(xdotool getwindowgeometry --shell "$wid")"
window_height="$HEIGHT"
window_width="$WIDTH"
window_x="$X"
window_y="$Y"
# xdotool does not check window decorations, get them from xprop
# Only use window offsets for positioning, not sizing!
props="$(xprop -notype _NET_FRAME_EXTENTS -id "$wid")" # L, R, T, B
props="${props#* = }"
extents=( ${props//,/} ) # ( L R T B )
window_height_offset=$(( ${extents[2]} + ${extents[3]} ))
window_width_offset=$(( ${extents[0]} + ${extents[1]} ))

if bb_checkopt verbose; then
    (( h_perc = window_height * 100 / desktop_height ))
    (( w_perc = window_width * 100 / desktop_width ))
    printf "SCREEN  H=%-5d W=%-5d\n" "$screen_height" "$screen_width"
    printf "DESKTOP H=%-5d W=%-5d X=%-5d Y=%-5d\n" "$desktop_height" "$desktop_width" "$desktop_x" "$desktop_y"
    printf "WINDOW  H=%-5d W=%-5d X=%-5d Y=%-5d [%3d%%, %3d%%]\n" "$window_height" "$window_width" "$window_x" "$window_y" "$h_perc" "$w_perc"
fi

set_size () {
    (( window_height = $1 * desktop_height / 100 ))
    (( window_width = $2 * desktop_width / 100  ))
    windowsize=( "windowsize" "$wid" "$window_width" "$window_height" )
}

scale_size () {
    (( window_height = window_height * (100 + $1) / 100 ))
    (( window_width = window_width * (100 + $1) / 100 ))
    (( window_height = window_height > desktop_height ? desktop_height : window_height ))
    (( window_width = window_width > desktop_width ? desktop_width : window_width ))
    windowsize=( "windowsize" "$wid" "$window_width" "$window_height" )
}

# Commands
case "${1:-center}" in
    grow)
        scale_size "$inc"
        ;;
    shrink)
        scale_size "-$inc"
        ;;
    size)
        shift
        hsize="$1"
        wsize="${2:-$1}"
        bb_checkset hsize || bb_errusage "size height% [width%]"
        hsize="${hsize%\%}"
        wsize="${wsize%\%}"
        is_valid_percent "$hsize" || bb_errusage "height% must be between 1 and 100"
        is_valid_percent "$wsize" || bb_errusage "weight% must be between 1 and 100"
        set_size "$hsize" "$wsize"
        ;;
    center)
        ;;
    *)
        bb_errusage "invalid command: $1"
        ;;
esac

window_x="$(( (desktop_width - window_width - window_width_offset) / 2 + desktop_x ))"
window_y="$(( (desktop_height - window_height - window_height_offset) / 2 + desktop_y ))"
if bb_checkopt verbose; then
    (( h_perc = window_height * 100 / desktop_height ))
    (( w_perc = window_width * 100 / desktop_width ))
    printf "NEW     H=%-5d W=%-5d X=%-5d Y=%-5d [%3d%%, %3d%%]\n" "$window_height" "$window_width" "$window_x" "$window_y" "$h_perc" "$w_perc"
fi
exec xdotool "${windowsize[@]}" windowmove "$wid" "$window_x" "$window_y"
