#!/usr/bin/env python3

import os
import stat
import sys
import argparse
import glob
import re

def get_inodes(d):
    from collections import defaultdict
    inodes = defaultdict(int)
    # Single file
    if os.path.isfile(d):
        inode = os.lstat(d)[stat.ST_INO]
        inodes[inode] += 1
        return inodes
    # Directory: get all inodes of files recursively
    for root, dirs, files in os.walk(d):
        for f in files:
            inode = os.lstat(os.path.join(root, f))[stat.ST_INO]
            inodes[inode] += 1
    return inodes

def find(f, args):
    matches = []
    inodes = {} if args.all else get_inodes(f)
    for backupdirname in args.I:
        backupdirs = [backupdirname] + ['*'] * (args.depth - 1)
        dirs = os.path.abspath(f).split(os.path.sep)
        for i in range(1, len(dirs)):
            newdirs = dirs[:]
            newdirs[i:i] = backupdirs
            for match in glob.glob(os.path.join(os.path.sep, *newdirs)):
                backupinodes = {} if args.all else get_inodes(match)
                if args.all or inodes == backupinodes:
                    matches.append(match)
    # Sort from oldest to most recent
    matches.sort(key=os.path.getctime)
    return matches

def prompt(f):
    q = 'Remove {}? (Yy) > '.format(f)
    # If getch is available (pip install getch), use it;
    # otherwise fall back to input() which requires pressing return after each response
    try:
        import getch
        print(q, end='')
        sys.stdout.flush()
        resp = getch.getche().lower()
        if resp != '\n':
            print()
        return resp == 'y'
    except:
        resp = input(q).lower()
        return resp and resp[0] == 'y'

def purge(files, args):
    for f in files:
        if args.force or prompt(f):
            print('Removing {}'.format(f))
            if os.path.isdir(f):
                from shutil import rmtree
                rmtree(f)
            else:
                os.remove(f)

def ls(files, args):
    import time
    for f in files:
        if args.verbose:
            inodes = get_inodes(f)
            if len(inodes) == 1:
                inode = list(inodes.keys())[0]
            else:
                inode = "DIR"
            print(inode, time.strftime('%x %X', time.localtime(os.path.getctime(f))), f)
        else:
            print(f)

def main():
    dopurge = bool(re.search('purge', sys.argv[0]))
    action = 'purge' if dopurge else 'list'
    epilog = """
    If a directory is given, the files are purged recursively if the inodes under the directory exactly match the backup version(s), unless the --all flag is used.
    """ if dopurge else None
    
    parser = argparse.ArgumentParser(description='{}s files from backup/snapshot directories'.format(action.capitalize()), epilog=epilog)
    parser.add_argument('files', nargs='+', help='Files to {} from backup directories'.format(action))
    req = parser.add_argument_group('required arguments')
    req.add_argument('-I', metavar='DIRNAME', action='append', required=True, help='Backup directory name')
    req.add_argument('-d', '--depth', type=int, required=True, help='Depth of the backup directory structure')
    parser.add_argument('-a', '--all', action='store_true', default=False if dopurge else True, help='Purge backed up versions of FILES even if their inodes do not match' if dopurge else argparse.SUPPRESS)
    if dopurge:
        parser.add_argument('-f', '--force', action='store_true', help='Do not interactively prompt for each removal')
    else:
        parser.add_argument('-v', '--verbose', action='store_true', help='Show statistics of backup files')

    args = parser.parse_args()

    for f in args.files:
        if dopurge:
            purge(find(f, args), args)
        else:
            ls(find(f, args), args)

if __name__ == '__main__':
    main()

